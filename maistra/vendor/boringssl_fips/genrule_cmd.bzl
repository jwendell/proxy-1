
_GENRULE_CMD = {"@envoy//bazel/external:boringssl_fips.genrule_cmd": "#!/bin/bash\n\nset -e\n\n# BoringSSL build as described in the Security Policy for BoringCrypto module (2018-10-25):\n# https://csrc.nist.gov/CSRC/media/projects/cryptographic-module-validation-program/documents/security-policies/140sp3318.pdf\n\n# This works only on Linux-x86_64.\nif [[ `uname` != \"Linux\" || `uname -m` != \"x86_64\" ]]; then\n  echo \"ERROR: BoringSSL FIPS is currently supported only on Linux-x86_64.\"\n  exit 1\nfi\n\n# Bazel magic.\nROOT=$$(dirname $(rootpath boringssl/BUILDING.md))/..\npushd $$ROOT\n\n# Build tools requirements:\n# - Clang compiler version 6.0.1 (https://releases.llvm.org/download.html)\n# - Go programming language version 1.10.3 (https://golang.org/dl/)\n# - Ninja build system version 1.8.2 (https://github.com/ninja-build/ninja/releases)\n\n# Override $$PATH for build tools, to avoid picking up anything else.\nexport PATH=\"$$(dirname `which cmake`):/usr/bin:/bin\"\n\n# Clang 6.0.1\nVERSION=6.0.1\nSHA256=7ea204ecd78c39154d72dfc0d4a79f7cce1b2264da2551bb2eef10e266d54d91\nPLATFORM=\"x86_64-linux-gnu-ubuntu-16.04\"\n\ncurl -sLO https://releases.llvm.org/\"$$VERSION\"/clang+llvm-\"$$VERSION\"-\"$$PLATFORM\".tar.xz \\\n  && echo \"$$SHA256\" clang+llvm-\"$$VERSION\"-\"$$PLATFORM\".tar.xz | sha256sum --check\ntar xf clang+llvm-\"$$VERSION\"-\"$$PLATFORM\".tar.xz\n\nexport HOME=\"$$PWD\"\nprintf \"set(CMAKE_C_COMPILER \\\"clang\\\")\\nset(CMAKE_CXX_COMPILER \\\"clang++\\\")\\n\" > $${HOME}/toolchain\nexport PATH=\"$$PWD/clang+llvm-$$VERSION-$$PLATFORM/bin:$$PATH\"\n\nif [[ `clang --version | head -1 | awk '{print $$3}'` != \"$$VERSION\" ]]; then\n  echo \"ERROR: Clang version doesn't match.\"\n  exit 1\nfi\n\n# Go 1.10.3\nVERSION=1.10.3\nSHA256=fa1b0e45d3b647c252f51f5e1204aba049cde4af177ef9f2181f43004f901035\nPLATFORM=\"linux-amd64\"\n\ncurl -sLO https://dl.google.com/go/go\"$$VERSION\".\"$$PLATFORM\".tar.gz \\\n  && echo \"$$SHA256\" go\"$$VERSION\".\"$$PLATFORM\".tar.gz | sha256sum --check\ntar xf go\"$$VERSION\".\"$$PLATFORM\".tar.gz\n\nexport GOROOT=\"$$PWD/go\"\nexport PATH=\"$$GOROOT/bin:$$PATH\"\n\nif [[ `go version | awk '{print $$3}'` != \"go$$VERSION\" ]]; then\n  echo \"ERROR: Go version doesn't match.\"\n  exit 1\nfi\n\n# Ninja 1.8.2\nVERSION=1.8.2\nSHA256=d2fea9ff33b3ef353161ed906f260d565ca55b8ca0568fa07b1d2cab90a84a07\nPLATFORM=\"linux\"\n\ncurl -sLO https://github.com/ninja-build/ninja/releases/download/v\"$$VERSION\"/ninja-\"$$PLATFORM\".zip \\\n  && echo \"$$SHA256\" ninja-\"$$PLATFORM\".zip | sha256sum --check\nunzip -o ninja-\"$$PLATFORM\".zip\n\nexport PATH=\"$$PWD:$$PATH\"\n\nif [[ `ninja --version` != \"$$VERSION\" ]]; then\n  echo \"ERROR: Ninja version doesn't match.\"\n  exit 1\nfi\n\n# Clean after previous build.\nrm -rf boringssl/build\n\n# Build BoringSSL.\ncd boringssl\nmkdir build && cd build && cmake -GNinja -DCMAKE_TOOLCHAIN_FILE=$${HOME}/toolchain -DFIPS=1 -DCMAKE_BUILD_TYPE=Release ..\nninja\nninja run_tests\n\n# Verify correctness of the FIPS build.\nif [[ `tool/bssl isfips` != \"1\" ]]; then\n  echo \"ERROR: BoringSSL tool didn't report FIPS build.\"\n  exit 1\nfi\n\n# Move compiled libraries to the expected destinations.\npopd\nmv $$ROOT/boringssl/build/crypto/libcrypto.a $(execpath crypto/libcrypto.a)\nmv $$ROOT/boringssl/build/ssl/libssl.a $(execpath ssl/libssl.a)\n"}
def genrule_cmd(label):
    return _GENRULE_CMD[label]
